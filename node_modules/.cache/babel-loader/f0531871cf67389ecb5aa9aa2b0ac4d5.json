{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\mihae\\\\OneDrive\\\\Desktop\\\\Front-End Dev. Course\\\\course29-project\\\\src\\\\components\\\\post\\\\Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Container, Header, UserDetails, Avatar, UserFullName, PostDate, ContentWrapper, UserActions, ActionButton, Label, Count, ActionUserList, CommentsWrap, Comment, UserImage, CommentContent, UserName, CommentText } from './Post.style';\nimport { users } from '../../data/users';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEllipsisV, faHeart, faComments, faRetweet } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Post = ({\n  postData\n}) => {\n  _s();\n\n  const [hasInteracted, setHasInteracted] = useState({\n    like: false,\n    share: false\n  });\n  const [commentsOpen, setCommentsOpen] = useState(false);\n\n  function getAuthorData(id) {\n    return users.find(user => user.id === id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(UserDetails, {\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          src: getAuthorData(postData.author).avatar.small\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(UserFullName, {\n            children: `${getAuthorData(postData.author).first_name} \n                     ${getAuthorData(postData.author).last_name}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(PostDate, {\n            children: postData.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faEllipsisV\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ContentWrapper, {\n      children: [postData.content.text !== undefined && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: postData.content.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this), postData.content.video !== undefined && /*#__PURE__*/_jsxDEV(\"video\", {\n        src: postData.content.video,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this), postData.content.image.length > 0 && postData.content.image.map((source, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: source,\n        alt: `${getAuthorData(postData.author).first_name} \n             ${getAuthorData(postData.author).last_name}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 61\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(UserActions, {\n      children: [/*#__PURE__*/_jsxDEV(ActionButton, {\n        interacted: hasInteracted.like,\n        onClick: () => setHasInteracted({ ...hasInteracted,\n          like: !hasInteracted.like\n        }),\n        children: [postData.likes.length > 0 && /*#__PURE__*/_jsxDEV(ActionUserList, {\n          children: postData.likes.map((user, index) => {\n            const currentUser = getAuthorData(user);\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [currentUser.first_name, \" \", currentUser.last_name]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faHeart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          children: \"Likes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), postData.likes.length > 0 && /*#__PURE__*/_jsxDEV(Count, {\n          children: postData.likes.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ActionButton, {\n        children: [postData.comments.length > 0 && /*#__PURE__*/_jsxDEV(ActionUserList, {\n          children: postData.comments.map((comment, index) => {\n            const currentUser = getAuthorData(comment.user);\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [currentUser.first_name, \" \", currentUser.last_name]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faComments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), postData.comments.length > 0 && /*#__PURE__*/_jsxDEV(Count, {\n          children: postData.comments.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ActionButton, {\n        interacted: hasInteracted.share,\n        onClick: () => setHasInteracted({ ...hasInteracted,\n          share: !hasInteracted.share\n        }),\n        children: [postData.shares.length > 0 && /*#__PURE__*/_jsxDEV(ActionUserList, {\n          children: postData.shares.map((share, index) => {\n            const currentUser = getAuthorData(share);\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [currentUser.first_name, \" \", currentUser.last_name]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faRetweet\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          children: \"Shares\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), postData.shares.length > 0 && /*#__PURE__*/_jsxDEV(Count, {\n          children: postData.shares.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 45\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CommentsWrap, {\n      children: postData.comments.length > 0 && postData.comments.map((comment, index) => {\n        const currentUser = getAuthorData(comment.user);\n        return /*#__PURE__*/_jsxDEV(Comment, {\n          children: [/*#__PURE__*/_jsxDEV(UserImage, {\n            src: currentUser.avatar.large\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n            children: [/*#__PURE__*/_jsxDEV(UserName, {\n              children: [currentUser.first_name, \" \", currentUser.last_name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n              children: comment.comment_text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Post, \"JI7BeABcYoTUYx8+tcCvgqSIB/g=\");\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/mihae/OneDrive/Desktop/Front-End Dev. Course/course29-project/src/components/post/Post.js"],"names":["React","useState","Container","Header","UserDetails","Avatar","UserFullName","PostDate","ContentWrapper","UserActions","ActionButton","Label","Count","ActionUserList","CommentsWrap","Comment","UserImage","CommentContent","UserName","CommentText","users","FontAwesomeIcon","faEllipsisV","faHeart","faComments","faRetweet","Post","postData","hasInteracted","setHasInteracted","like","share","commentsOpen","setCommentsOpen","getAuthorData","id","find","user","author","avatar","small","first_name","last_name","date","content","text","undefined","video","image","length","map","source","index","likes","currentUser","comments","comment","shares","large","comment_text"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Header, UserDetails, Avatar, UserFullName, PostDate, ContentWrapper, UserActions, ActionButton, Label, Count, ActionUserList, CommentsWrap, Comment, UserImage, CommentContent, UserName, CommentText } from './Post.style';\r\nimport { users } from '../../data/users';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEllipsisV, faHeart, faComments, faRetweet } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Post = ({postData}) => {\r\n   const [hasInteracted, setHasInteracted] = useState({\r\n     like: false,\r\n     share: false,\r\n   })\r\n\r\n   const [commentsOpen, setCommentsOpen] = useState(false)\r\n   \r\n    function getAuthorData(id) {\r\n      return users.find((user) => user.id === id)\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        <Header>\r\n           <UserDetails>\r\n             <Avatar src={getAuthorData(postData.author).avatar.small}/>\r\n             <div>\r\n                 <UserFullName>\r\n                     {`${getAuthorData(postData.author).first_name} \r\n                     ${getAuthorData(postData.author).last_name}`}\r\n                 </UserFullName>\r\n                 <PostDate>{postData.date}</PostDate>\r\n             </div>\r\n           </UserDetails>\r\n           <FontAwesomeIcon icon={faEllipsisV} />\r\n        </Header> \r\n        <ContentWrapper>\r\n            {postData.content.text !== undefined &&\r\n             (<p>{postData.content.text}</p>)}\r\n            {postData.content.video !== undefined && \r\n             (<video src={postData.content.video} controls/>)}\r\n            {postData.content.image.length > 0 && \r\n             postData.content.image.map((source, index) => (<img src={source} key={index} alt={`${getAuthorData(postData.author).first_name} \r\n             ${getAuthorData(postData.author).last_name}`} /> ))} \r\n        </ContentWrapper>\r\n\r\n        <UserActions>\r\n          <ActionButton interacted={hasInteracted.like} onClick={() => setHasInteracted({ \r\n            ...hasInteracted,\r\n            like: !hasInteracted.like\r\n          })}>\r\n            {postData.likes.length > 0 && (\r\n              <ActionUserList>\r\n              {postData.likes.map((user, index) => {\r\n                const currentUser = getAuthorData(user);\r\n                return ( \r\n                  <span key={index}>\r\n                    {currentUser.first_name} {currentUser.last_name}\r\n                  </span>\r\n                );\r\n              })}\r\n            </ActionUserList>\r\n            )}\r\n            <FontAwesomeIcon icon={faHeart} />\r\n            <Label>Likes</Label>\r\n            {postData.likes.length > 0 && (<Count>{postData.likes.length}</Count>)}\r\n          </ActionButton>\r\n\r\n          <ActionButton>\r\n            {postData.comments.length > 0 && (\r\n              <ActionUserList>\r\n              {postData.comments.map((comment, index) => {\r\n                const currentUser = getAuthorData(comment.user);\r\n                return ( \r\n                  <span key={index}>\r\n                    {currentUser.first_name} {currentUser.last_name}\r\n                  </span>\r\n                );\r\n              })}\r\n            </ActionUserList>\r\n            )}\r\n            <FontAwesomeIcon icon={faComments} />\r\n            <Label>Comment</Label>\r\n            {postData.comments.length > 0 && (<Count>{postData.comments.length}</Count>)}\r\n          </ActionButton>\r\n\r\n          <ActionButton interacted={hasInteracted.share} onClick={() => setHasInteracted({\r\n            ...hasInteracted,\r\n            share: !hasInteracted.share\r\n          })}>\r\n           {postData.shares.length > 0 && (\r\n              <ActionUserList>\r\n              {postData.shares.map((share, index) => {\r\n                const currentUser = getAuthorData(share);\r\n                return ( \r\n                  <span key={index}>\r\n                    {currentUser.first_name} {currentUser.last_name}\r\n                  </span>\r\n                );\r\n              })}\r\n            </ActionUserList>\r\n           )}\r\n            <FontAwesomeIcon icon={faRetweet} />\r\n            <Label>Shares</Label>\r\n            {postData.shares.length > 0 && (<Count>{postData.shares.length}</Count>)}\r\n          </ActionButton>\r\n        </UserActions>\r\n        <CommentsWrap>\r\n          {postData.comments.length > 0 && postData.comments.map((comment, index) => {\r\n            const currentUser = getAuthorData(comment.user)\r\n            return (\r\n              <Comment key={index}>\r\n              <UserImage src={currentUser.avatar.large}/>\r\n              <CommentContent>\r\n                <UserName>\r\n                  {currentUser.first_name} {currentUser.last_name}\r\n                </UserName>\r\n                <CommentText>{comment.comment_text}</CommentText>\r\n              </CommentContent>\r\n            </Comment>\r\n            )\r\n          })}\r\n        </CommentsWrap>\r\n      </Container>\r\n    );\r\n};\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}